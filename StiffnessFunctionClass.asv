classdef StiffnessFunctionClass < handle
    
    properties (Access = private)
        numNodesElem
        numDOFsNode
        numElements
        xGlobal
        nodalConnec
        beamProp
        materialConnec
    end

    properties (Access = public)
        Kel
    end

    methods (Access = public)
        
        function obj = StiffnessFunctionClass(cParams)
            obj.init(cParams);
            obj.compute();
        end

    end

    methods (Access = private)

        function init(obj,cParams)
            obj.numNodesElem   = cParams.numNodesElem;
            obj.numDOFsNode    = cParams.numDOFsNode;
            obj.numElements    = cParams.numElements;
            obj.xGlobal        = cParams.xGlobal';
            obj.nodalConnec    = cParams.nodalConnec;
            obj.beamProp       = cParams.beamProp;
            obj.materialConnec = cParams.materialConnec;
        end

        function compute(obj)
            nne = obj.numNodesElem;
            ni  = obj.numDOFsNode;
            nel = obj.numElements;
            Kel = zeros(nne*ni,nne*ni,nel);
            for ei = 1:nel
                b.le = abs(x(nodalConnec(ei,2),1) - x(nodalConnec(ei,1),1));
            
                b.E = beamProp(materialConnec(ei),1);
                b.G = beamProp(materialConnec(ei),2);
                b.I = beamProp(materialConnec(ei),3);
                b.J = beamProp(materialConnec(ei),4);
        
                BendMatrix = BendingStiffMatrixAssembly(b);
                BendMatrix.assembleMatrix();
                Kb = BendMatrix.Kb;
            
                TorMatrix = TorsionStiffMatrixAssembly(b);
                TorMatrix.assembleMatrix();
                Kt = TorMatrix.Kt;
            
                K = Kb + Kt;
                Kel(:,:,ei) = K;
            end
        end

    end

end